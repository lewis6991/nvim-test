#!/usr/bin/env bash

set -euo pipefail

NVIM_TEST_HOME=$(dirname "$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)")
NVIM_RUNNER_VERSION=${NVIM_RUNNER_VERSION:-v0.11.0}
NVIM_TEST_VERSION=${NVIM_TEST_VERSION:-v0.11.0}
INIT_ONLY=
LUACOV_ENABLED=

DATA=${XDG_DATA_HOME-$HOME/.data}/nvim-test
mkdir -p "$DATA"

ARGS=()

function help() {
  echo "Usage: nvim-test [OPTIONS] [--] [BUSTED_ARGS]"
  echo "ARGUMENTS:"
  echo "  BUSTED_ARGS                     Arguments passed directly to busted."
  echo ""
  echo "OPTIONS:"
  echo "  --runner_version [NVIM_VERSION] Which version of Nvim to run as the test runner"
  echo "                                  (Default 0.9.5)"
  echo "  --target_version [NVIM_VERSION] Which version of Nvim to run tests on"
  echo "                                  (Default 0.9.5)"
  echo "  --clean                         Redownload test collateral."
  echo "  --init                          Initialize nvim-test. Do not run tests."
}

function parse_args() {
  local finished=
  while [[ $# -gt 0 ]]; do
    # case $1 in
    #   -c|--coverage)
    #     LUACOV_ENABLED=1
    #     ;;
    # esac
    if [[ $finished ]]; then
      ARGS+=("$1") # save positional arg
    else
      case $1 in
        -h|--help)
          help
          exit
          ;;
        --init)
          INIT_ONLY=1
          ;;
        --clean)
          echo "Cleaning $DATA"
          rm -rf "$DATA"
          mkdir -p "$DATA"
          ;;
        --runner_version)
          shift
          NVIM_RUNNER_VERSION=$1
          ;;
        --target_version)
          shift
          NVIM_TEST_VERSION=$1
          ;;
        --)
          # pass remaining args to busted
          finished=1
          ;;
        *)
          ARGS+=("$1") # save positional arg
          ;;
      esac
    fi
    shift
  done
}

parse_args "$@"

function version {
  echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'
}

function version_cmp {
  [[ $(version "$1") -ge $(version "$2") ]]
}

function get_platform() {
  local ver=$1
  if [[ $(uname -s) == Darwin ]]; then
    if [[ $ver == 'nightly' ]] || version_cmp "$ver" 0.10; then
      echo "macos-$(uname -m)"
    else
      # prior to 0.10, MacOS builds were universal
      echo "macos"
    fi
  else
    if [[ $ver == 'nightly' ]] || version_cmp "$ver" 0.10.4; then
      echo "linux-$(uname -m)"
    else
      echo "linux64"
    fi
  fi
}


NVIM_URL=https://github.com/neovim/neovim/releases/download
NVIM_RELEASES_URL=https://github.com/neovim/neovim-releases/releases/download

NVIM_RUNNER="$DATA/nvim-runner-$NVIM_RUNNER_VERSION"
NVIM_TEST="$DATA/nvim-test-$NVIM_TEST_VERSION"

function use_nvim_releases() {
  local ver=$1
  local platform=$2
  [[ $platform == linux64 ]] && version_cmp "$ver" 0.10
}

function fetch_nvim() {
  local ver=$1
  local dst=$2
  local platform; platform=$(get_platform "$ver")
  local asset; asset="nvim-$platform"

  local url
  if use_nvim_releases "$ver" "$platform"; then
    url="$NVIM_RELEASES_URL/$ver/$asset.tar.gz"
  else
    url="$NVIM_URL/$ver/$asset.tar.gz"
  fi

  rm -rf "$dst"
  rm -rf "$asset.tar.gz"
  wget "$url"
  tar -xf "$asset.tar.gz"
  rm -rf "$asset.tar.gz"
  mv "$asset" "$dst"
}

if [ ! -d "$NVIM_TEST" ]; then
  echo "Download Nvim $NVIM_TEST_VERSION as test target"
  fetch_nvim "$NVIM_TEST_VERSION" "$NVIM_TEST"
fi

if [ ! -d "$NVIM_RUNNER" ]; then
  echo "Download Nvim $NVIM_RUNNER_VERSION as test runner"
  fetch_nvim "$NVIM_RUNNER_VERSION" "$NVIM_RUNNER"
fi

if [ $INIT_ONLY ]; then
  exit
fi

export LUA_PATH="$NVIM_TEST_HOME/lua/?.lua;$NVIM_TEST_HOME/lua/?/init.lua;"

export NVIM_PRG=$NVIM_TEST/bin/nvim
export NVIM_TEST_HOME

exec "$NVIM_RUNNER"/bin/nvim -ll \
  "$NVIM_TEST_HOME/lua/nvim-test/busted/runner.lua" \
  --helper="$NVIM_TEST_HOME/lua/nvim-test/preload.lua" \
  --lpath="$NVIM_TEST_HOME/lua/?.lua" \
  --output nvim-test.busted.output_handler \
  "${ARGS[@]}"
